version: 2
jobs:

  test:
    docker:
      - image: cpdbdev/cpdbv2_frontend:0.2.0
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v2-node-modules-{{ checksum "package.json" }}-
            - v2-node-modules-
      - run: yarn
      - run: yarn lint
      - run: yarn cover
      - run: yarn cover-report
      - run: yarn live-test
      - store_artifacts:
          path: /home/deploy/errorShots
      - save_cache:
          key: v2-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
          paths:
            - "/home/deploy/project/node_modules"

  build:
    docker:
      - image: cpdbdev/cpdbv2_frontend:0.2.0
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v2-node-modules-{{ checksum "package.json" }}-
            - v2-node-modules-
      - run: yarn
      - run:
          name: Build assets
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_PROD_ACCOUNT_NAME
              yarn build
            else
              export AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_STAGING_ACCOUNT_NAME
              yarn build-staging
            fi
      - persist_to_workspace:
          root: .
          paths:
            - dist

  push_image:
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run: cp -R /tmp/workspace/dist ./dist
      - run:
          name: Build and push image
          command: |
            docker build -t cpdbdev/desktop-frontend:$(cat VERSION) .
            docker login -u cpdbdev -p $DOCKER_PASSWORD
            docker push cpdbdev/desktop-frontend:$(cat VERSION)

  deploy:
    docker:
      - image: cpdbdev/kubectl:v1.11.3
    steps:
      - checkout
      - run:
          name: Apply deployment
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export NAMESPACE=production
            else
              export NAMESPACE=staging
            fi
            echo $KUBECONFIG_JSON > /root/project/config.json
            IMAGE_TAG=$(cat VERSION) templater desktop-frontend.yml | kubectl --kubeconfig /root/project/config.json apply -f - --namespace=$NAMESPACE

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only:
                - staging
                - master
      - push_image:
          requires:
            - build
      - deploy:
          requires:
            - push_image
